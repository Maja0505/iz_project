176;"Configuration/Environment Manipulation";Meta;Draft;"An attacker manipulates files or settings external to a target application which affect the behavior of that application. For example, many applications use external configuration files and libraries - modification of these entities or otherwise affecting the application's ability to use them would constitute a configuration/environment manipulation attack.";"";;Medium;"";"";"::The target application must consult external files or configuration controls to control its execution. All but the very simplest applications meet this requirement.::";"";"::The attacker must have the access necessary to affect the files or other environment items the targeted application uses for its operations.::";"";"";"";"";"::15::1233::1234::";"TAXONOMY NAME:OWASP Attacks:ENTRY NAME:Setting Manipulation::";"";
438;"Modification During Manufacture";Meta;Draft;"An attacker modifies a technology, product or component during a stage in its manufacture for the purpose of carrying out an attack against some entity involved in the supply chain lifecycle. There are an almost limitless number of ways an attacker can modify a technology when they are involved in its manufacture, as the attacker has potential inroads to the software composition; hardware design and assembly,firmware or basic design mechanics. Additionally, manufacturing of key components is often outsourced with the final product assembled by the primary manufacturer. The greatest risk, however, is deliberate manipulation of design specifications to produce malicious hardware or devices. There are billions of transistors in a single integrated circuit and studies have shown that fewer than 10 transistors are required to create malicious functionality.";"";;;"";"";"";"";"";"";"";"";"";"";"TAXONOMY NAME:ATTACK:ENTRY ID:1195.001:ENTRY NAME:Supply Chain Compromise:Compromise Software Dependencies and Development Tools::::TAXONOMY NAME:ATTACK:ENTRY ID:1195.002:ENTRY NAME:Supply Chain Compromise:Compromise Software Supply Chain::::TAXONOMY NAME:ATTACK:ENTRY ID:1195.003:ENTRY NAME:Supply Chain Compromise:Compromise Hardware Supply Chain::";"";
439;"Manipulation During Distribution";Meta;Draft;"An attacker undermines the integrity of a product, software or technology at some stage of the distribution channel. The core threat of modification or manipulation during distribution arise from the many stages of distribution, as a product may traverse multiple suppliers and integrators as the final asset is delivered. Components and services provided from a manufacturer to a supplier may be tampered with during integration or packaging.";"";;;"";"";"";"";"";"";"";"";"::A malicious OEM provider, or OEM provider employee or contractor, may install software, or modify existing code, during distribution.::External contractors involved in the packaging or testing of products or components may install software, or modify existing code, during distribution.::";"::1269::";"TAXONOMY NAME:ATTACK:ENTRY ID:1195.001:ENTRY NAME:Supply Chain Compromise:Compromise Software Dependencies and Development Tools::::TAXONOMY NAME:ATTACK:ENTRY ID:1195.002:ENTRY NAME:Supply Chain Compromise:Compromise Software Supply Chain::::TAXONOMY NAME:ATTACK:ENTRY ID:1195.003:ENTRY NAME:Supply Chain Compromise:Compromise Hardware Supply Chain::";"";
440;"Hardware Integrity Attack";Meta;Stable;"An adversary exploits a weakness in the system maintenance process and causes a change to be made to a technology, product,component or sub-component or a new one installed during its deployed use at the victim location for the purpose of carrying out an attack.";"";Low;High;"";"";"::Influence over the deployed system at a victim location.::";"";"";"";"::SCOPE:IntegrityTECHNICAL IMPACT:Execute Unauthorized Commands::";"";"";"";"TAXONOMY NAME:ATTACK:ENTRY ID:1200:ENTRY NAME:Hardware Additions::";"";
441;"Malicious Logic Insertion";Meta;Stable;"An adversary installs or adds malicious logic (also known as malware) into a seemingly benign component of a fielded system. This logic is often hidden from the user of the system and works behind the scenes to achieve negative impacts. With the proliferation of mass digital storage and inexpensive multimedia devices, Bluetooth and 802.11 support,new attack vectors for spreading malware are emerging for things we once thought of as innocuous greeting cards, picture frames, or digital projectors. This pattern of attack focuses on systems already fielded and used in operation as opposed to systems and their components that are still under development and part of the supply chain.";"";Medium;High;"";"";"::Access to the component currently deployed at a victim location.::";"";"";"";"::SCOPE:AuthorizationTECHNICAL IMPACT:Execute Unauthorized Commands::";"";"";"::284::";"";"";
203;"Manipulate Registry Information";Standard;Stable;"An adversary exploits a weakness in authorization in order to modify content within a registry (e.g.,Windows Registry, Mac plist, application registry). Editing registry information can permit the adversary to hide configuration information or remove indicators of compromise to cover up activity. Many applications utilize registries to store configuration and service information. As such, modification of registry information can affect individual services (affecting billing, authorization, or even allowing for identity spoofing) or the overall configuration of a targeted application. For example,both Java RMI and SOAP use registries to track available services. Changing registry values is sometimes a preliminary step towards completing another attack pattern,but given the long term usage of many registry values, manipulation of registry information could be its own end.";"";;Medium;"::NATURE:ChildOf:CAPEC ID:176::";"";"::The targeted application must rely on values stored in a registry.::The adversary must have a means of elevating permissions in order to access and modify registry content through either administrator privileges (e.g., credentialed access), or a remote access tool capable of editing a registry through an API.::";"::SKILL:The adversary requires privileged credentials or the development/acquiring of a tailored remote access tool.:LEVEL:High::";"::None: No specialized resources are required to execute this type of attack.::";"";"";"::Ensure proper permissions are set for Registry hives to prevent users from modifying keys.::Employ a robust and layered defensive posture in order to prevent unauthorized users on your system.::Employ robust identification and audit/blocking using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.::";"::Manipulating registration information can be undertaken in advance of a path traversal attack (inserting relative path modifiers) or buffer overflow attack (enlarging a registry value beyond an application's ability to store it).::";"::15::";"TAXONOMY NAME:ATTACK:ENTRY ID:1112:ENTRY NAME:Modify Registry::";"";
271;"Schema Poisoning";Standard;Draft;"An adversary corrupts or modifies the content of a schema for the purpose of undermining the security of the target. Schemas provide the structure and content definitions for resources used by an application. By replacing or modifying a schema,the adversary can affect how the application handles or interprets a resource, often leading to possible denial of service, entering into an unexpected state,or recording incomplete data.";"";Low;High;"::NATURE:ChildOf:CAPEC ID:176::";"";"::Some level of access to modify the target schema.::The schema used by the target application must be improperly secured against unauthorized modification and manipulation.::";"";"::Access to the schema and the knowledge and ability modify it. Ability to replace or redirect access to the modified schema.::";"";"::SCOPE:AvailabilityTECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption:NOTE:Availability Unreliable Execution Resource Consumption A successful schema poisoning attack can compromise the availability of the target system's service by exhausting its available resources.::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::";"::Design: Protect the schema against unauthorized modification.::Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the schema document.::Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.::";"::In a JSON Schema Poisoning Attack, an adervary modifies the JSON schema to cause a Denial of Service (DOS) or to submit malicious input: { title: Contact, type: object,properties: { Name: { type: string },Phone: { type: string },Email: { type: string }, Address: { type: string } }, required: [Name,Phone,Email,Address] } If the 'name' attribute is required in all submitted documents and this field is removed by the adversary,the application may enter an unexpected state or record incomplete data. Additionally,if this data is needed to perform additional functions,a Denial of Service (DOS) may occur.::In a Database Schema Poisoning Attack, an adversary alters the database schema being used to modify the database in some way. This can result in loss of data, DOS, or malicious input being submitted. Assuming there is a column named name, an adversary could make the following schema change: ALTER TABLE Contacts MODIFY Name VARCHAR(65353),The Name field of the Conteacts table now allows the storing of names up to 65353 characters in length. This could allow the adversary to store excess data within the database to consume system resource or to execute a DOS.::";"::15::";"";"";
536;"Data Injected During Configuration";Standard;Stable;"An attacker with access to data files and processes on a victim's system injects malicious data into critical operational data during configuration or recalibration, causing the victim's system to perform in a suboptimal manner that benefits the adversary.";"";Low;High;"::NATURE:ChildOf:CAPEC ID:176::";"";"::The attacker must have previously compromised the victim's systems or have physical access to the victim's systems.::Advanced knowledge of software and hardware capabilities of a manufacturer's product.::";"::SKILL:Ability to generate and inject false data into operational data into a system with the intent of causing the victim to alter the configuration of the system.:LEVEL:High::";"";"";"";"::Ensure that proper access control is implemented on all systems to prevent unauthorized access to system files and processes.::";"::An adversary wishes to bypass a security system to access an additional network segment where critical data is kept. The adversary knows that some configurations of the security system will allow for remote bypass under certain conditions, such as switching a specific parameter to a different value. The adversary knows the bypass will work but also will be detected within the logging data of the security system. The adversary waits until an upgrade is performed to the security system by the victim's system administrators; and the adversary has access to an external logging system. The adversary injects false log entries that cause the administrators to think there are two different error states within the security system - one involving the specific parameter and the other involving the logging entries. The specific parameter is adjusted to a different value; and the logging level is reduced to a lower level that will not cause an adversary bypass to be detected. The adversary stops injecting false log data; and the administrators of the security system believe the issues were caused by the upgrade and are now resolved. The adversary is then able to bypass the security system.::";"::284::";"";"";
578;"Disable Security Software";Standard;Usable;"An adversary exploits a weakness in access control to disable security tools so that detection does not occur. This can take the form of killing processes; deleting registry keys so that tools do not start at run time; deleting log files; or other methods.";"";Medium;Medium;"::NATURE:ChildOf:CAPEC ID:176::";"";"::The adversary must have the capability to interact with the configuration of the targeted system.::";"";"::None: No specialized resources are required to execute this type of attack.::";"";"::SCOPE:AvailabilityTECHNICAL IMPACT:Hide Activities:NOTE:Availability Hide Activities By disabling certain security tools; the adversary can hide malicious activity and avoid detection.::";"::Ensure proper permissions are in place to prevent adversaries from altering the execution status of security tools.::";"";"::284::";"TAXONOMY NAME:ATTACK:ENTRY ID:1562.001:ENTRY NAME:Impair Defenses:Disable or Modify Tools::";"";
75;"Manipulating Writeable Configuration Files";Standard;Draft;"Generally these are manually edited files that are not in the preview of the system administrators; any ability on the attackers' behalf to modify these files; for example in a CVS repository; gives unauthorized access directly to the application; the same as authorized users.";"";High;Very High;"::NATURE:ChildOf:CAPEC ID:176::";"";"::Configuration files must be modifiable by the attacker::";"::SKILL:To identify vulnerable configuration files; and understand how to manipulate servers and erase forensic evidence:LEVEL:Medium::";"";"";"::SCOPE:Confidentiality:SCOPE:Access Control:SCOPE:AuthorizationTECHNICAL IMPACT:Gain Privileges::";"::Design: Enforce principle of least privilege::Design: Backup copies of all configuration files::Implementation: Integrity monitoring for configuration files::Implementation: Enforce audit logging on code and configuration promotion procedures.::Implementation: Load configuration from separate process and memory space; for example a separate physical device like a CD::";"::The BEA Weblogic server uses a config.xml file to store configuration data. If this file is not properly protected by the system access control; an attacker can write configuration information to redirect server output through system logs; database connections; malicious URLs and so on. Access to the Weblogic server may be from a so-called Custom realm which manages authentication and authorization privileges on behalf of user principals. Given write access; the attacker can insert a pointer to a custom realm jar file in the config.xml < CustomRealmConfigurationData=java.util.PropertiesName=CustomRealmRealmClassName=Maliciousrealm.jar/> The main issue with configuration files is that the attacker can leverage all the same functionality the server has; but for malicious means. Given the complexity of server configuration; these changes may be very hard for administrators to detect.::";"::349::99::77::346::353::354::713::";"";"";
270;"Modification of Registry Run Keys";Detailed;Stable;"An adversary adds a new entry to the run keys in the registry so that an application of their choosing is executed when a user logs in. In this way; the adversary can get their executable to operate and run on the target system with the authorized user's level of permissions.";"";Medium;Medium;"::NATURE:ChildOf:CAPEC ID:203::";"";"::The adversary must have gained access to the target system via physical or logical means in order to carry out this attack.::";"";"";"";"::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data:TECHNICAL IMPACT:Gain Privileges::";"::Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::";"::An adversary can place a malicious executable (RAT) on the target system and then configure it to automatically run when the user logs in to maintain persistence on the target system.::Through the modification of registry run keys the adversary can masquerade a malicious executable as a legitimate program.::";"::15::";"TAXONOMY NAME:ATTACK:ENTRY ID:1547.001:ENTRY NAME:Boot or Logon Autostart Execution:Registry Run Keys – Start Folder::";"";
478;"Modification of Windows Service Configuration";Detailed;Usable;"An adversary exploits a weakness in access control to modify the execution parameters of a Windows service. Specifically; if the permissions for users and groups are not properly assigned and allow access to the registry keys used to store the configuration information for a service; then an adversary could change settings defining the path to the executable and cause a malicious binary to be executed.";"";Low;High;"::NATURE:ChildOf:CAPEC ID:203::";"";"::The adversary must have the capability to write to the Windows Registry on the targeted system.::";"";"::None: No specialized resources are required to execute this type of attack.::";"";"::SCOPE:IntegrityTECHNICAL IMPACT:Execute Unauthorized Commands:NOTE:Integrity Execute Unauthorized Commands By altering specific configuration settings for the service; the adversary could run arbitrary code to be executed.::";"::Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation.::";"";"::284::";"TAXONOMY NAME:ATTACK:ENTRY ID:1574.011:ENTRY NAME:Hijack Execution Flow:Service Registry Permissions Weakness::::TAXONOMY NAME:ATTACK:ENTRY ID:1543.003:ENTRY NAME:Create or Modify System Process:Windows Service::";"";
146;"XML Schema Poisoning";Detailed;Stable;"An adversary corrupts or modifies the content of XML schema information passed between a client and server for the purpose of undermining the security of the target. XML Schemas provide the structure and content definitions for XML documents. Schema poisoning is the ability to manipulate a schema either by replacing or modifying it to compromise the programs that process documents that use this schema. Possible attacks are denial of service attacks by modifying the schema so that it does not contain required information for subsequent processing. For example; the unaltered schema may require a @name attribute in all submitted documents. If the adversary removes this attribute from the schema then documents created using the new grammar may lack this field; which may cause the processing application to enter an unexpected state or record incomplete data. In addition; manipulation of the data types described in the schema may affect the results of calculations taken by the document reader. For example; a float field could be changed to an int field. Finally; the adversary may change the encoding defined in the schema for certain fields allowing the contents to bypass filters that scan for dangerous strings. For example; the modified schema might use a URL encoding instead of ASCII; and a filter that catches a semicolon (;) might fail to detect its URL encoding (%3B).";"";Low;High;"::NATURE:ChildOf:CAPEC ID:271::";"";"::Some level of access to modify the target schema.::The schema used by the target application must be improperly secured against unauthorized modification and manipulation.::";"";"::Access to the schema and the knowledge and ability modify it. Ability to replace or redirect access to the modified schema.::";"";"::SCOPE:AvailabilityTECHNICAL IMPACT:Unreliable Execution:TECHNICAL IMPACT:Resource Consumption:NOTE:Availability Unreliable Execution Resource Consumption A successful schema poisoning attack can compromise the availability of the target system's service by exhausting its available resources.::SCOPE:IntegrityTECHNICAL IMPACT:Modify Data::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::";"::Design: Protect the schema against unauthorized modification.::Implementation: For applications that use a known schema; use a local copy or a known good repository instead of the schema reference supplied in the XML document. Additionally; ensure that the proper permissions are set on local files to avoid unauthorized modification.::Implementation: For applications that leverage remote schemas; use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.::";"::XML Schema Poisoning Attacks can often occur locally due to being embedded within the XML document itself or being located on the host within an improperaly protected file. In these cases; the adversary can simply edit the XML schema without the need for additional privileges. An example of the former can be seen below: <?xml version=1.0?> <!DOCTYPE contact [ <!ELEMENT contact (name;phone;email;address)> <!ELEMENT name (#PCDATA)> <!ELEMENT phone (#PCDATA)> <!ELEMENT email (#PCDATA)> <!ELEMENT address (#PCDATA)> ]> <note> <name>John Smith</name> <phone>555-1234</phone> <email>jsmith@email.com</email> <address>1 Example Lane</address> </note></capec:Code> If the 'name' attribute is required in all submitted documents and this field is removed by the adversary; the application may enter an unexpected state or record incomplete data. Additionally; if this data is needed to perform additional functions; a Denial of Service (DOS) may occur.::XML Schema Poisoning Attacks can also be executed remotely if the HTTP protocol is being used to transport data. : <?xml version=1.0?> <!DOCTYPE contact SYSTEM http://example.com/contact.dtd[ <note> <name>John Smith</name> <phone>555-1234</phone> <email>jsmith@email.com</email> <address>1 Example Lane</address> </note></capec:Code> The HTTP protocol does not encrypt the traffic it transports; so all communication occurs in plaintext. This traffic can be observed and modified by the adversary during transit to alter the XML schema before it reaches the end user. The adversary can perform a Man-in-the-Middle (MITM) Attack to alter the schema in the same way as the previous example and to acheive the same results.::";"::15::472::";"";"";
444;"Development Alteration";Standard;Stable;"An adversary modifies a technology; product; or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software; modify or replace hardware components; and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.";"";Medium;High;"::NATURE:ChildOf:CAPEC ID:438::";"";"::Access to the system during the development phase to alter and/or modify software and hardware components. This access is often obtained via insider access or by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have.::";"";"";"";"::SCOPE:AuthorizationTECHNICAL IMPACT:Execute Unauthorized Commands::SCOPE:AvailabilityTECHNICAL IMPACT:Unreliable Execution::SCOPE:IntegrityTECHNICAL IMPACT:Alter Execution Logic::";"::Assess software and software components during development and prior to deployment to ensure that they function as intended and without any malicious functionality.::";"";"";"";"";
447;"Design Alteration";Standard;Stable;"An adversary modifies the design of a technology; product; or component to acheive a negative impact once the system is deployed. In this type of attack; the goal of the adversary is to modify the design of the system; prior to development starting; in such a way that the negative impact can be leveraged when the system is later deployed. Design alteration attacks differ from development alteration attacks in that design alteration attacks take place prior to development and which then may or may not be developed by the adverary. Design alteration attacks include modifying system designs to degrade system performance; cause unexpected states or errors; and general design changes that may lead to additional vulnerabilities. These attacks generally require insider access to modify design documents; but they may also be spoofed via web communications. The product is then developed and delivered to the user where the negative impact can be leveraged at a later time.";"";Medium;High;"::NATURE:ChildOf:CAPEC ID:438::";"";"::Access to system design documentation prior to the development phase. This access is often obtained via insider access or by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have.::Ability to forge web communications to deliver modified design documentation.::";"";"";"";"::SCOPE:AuthorizationTECHNICAL IMPACT:Execute Unauthorized Commands::SCOPE:AvailabilityTECHNICAL IMPACT:Unreliable Execution::SCOPE:IntegrityTECHNICAL IMPACT:Alter Execution Logic::";"::Assess design documentation prior to development to ensure that they function as intended and without any malicious functionality.::Ensure that design documentation is saved in a secure location and has proper access controls set in place to avoid unnecessary modification.::";"";"";"";"";
445;"Malicious Logic Insertion into Product Software via Configuration Management Manipulation";Detailed;Stable;"An adversary exploits a configuration management system so that malicious logic is inserted into a software products build; update or deployed environment. If an adversary can control the elements included in a product's configuration management for build they can potentially replace; modify or insert code files containing malicious logic. If an adversary can control elements of a product's ongoing operational configuration management baseline they can potentially force clients receiving updates from the system to install insecure software when receiving updates from the server. Configuration management servers operate on the basis of a client pool; instructing each client on which software to install. In some cases the configuration management server will automate the software installation process. A malicious insider or an adversary who has compromised the server can alter the software baseline that clients must install; allowing the adversary to compromise a large number of satellite machines using the configuration management system. If an adversary can control elements of a product's configuration management for its deployed environment they can potentially alter fundamental security properties of the system based on assumptions that secure configurations are in place.";"";Medium;High;"::NATURE:ChildOf:CAPEC ID:444::";"";"::Access to the configuration management system during deployment or currently deployed at a victim location. This access is often obtained via insider access or by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have.::";"";"";"";"::SCOPE:AuthorizationTECHNICAL IMPACT:Execute Unauthorized Commands::";"::Assess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality.::Leverage anti-virus products to detect and quarantine software with known virus.::";"";"";"";"";
446;"Malicious Logic Insertion into Product Software via Inclusion of 3rd Party Component Dependency";Detailed;Stable;"An adversary conducts supply chain attacks by the inclusion of insecure 3rd party components into a technology; product; or code-base; possibly packaging a malicious driver or component along with the product before shipping it to the consumer or acquirer. The result is a window of opportunity for exploiting the product or software until the insecure component is discovered. This supply chain threat can result in the installation of software that introduces widespread security vulnerabilities within an organization. One example could be the inclusion of an exploitable DLL (Dynamic Link Library) included within an antivirus technology. Because software often depends upon a large number of interdependent libraries and components to be present; security holes can be introduced merely by installing COTS software that comes pre-packaged with the components required for it to operate.";"";Medium;High;"::NATURE:ChildOf:CAPEC ID:444::";"";"::Access to the software during the development phase. This access is often obtained via insider access to include the 3rd party component after deployment.::";"";"";"";"::SCOPE:AuthorizationTECHNICAL IMPACT:Execute Unauthorized Commands::";"::Assess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality.::";"";"";"";"";
443;"Malicious Logic Inserted Into Product Software by Authorized Developer";Detailed;Stable;"An adversary uses their privileged position within an authorized software development organization to inject malicious logic into a codebase or product. Supply chain attacks from approved or trusted developers are extremely difficult to detect as it is generally assumed the quality control and internal security measures of these organizations conform to best practices. In some cases the malicious logic is intentional; embedded by a disgruntled employee; programmer; or individual with an otherwise hidden agenda. In other cases; the integrity of the product is compromised by accident (e.g. by lapse in the internal security of the organization that results in a product becoming contaminated). In other cases; the developer embeds a backdoor into a product to serve some purpose; such as product support; but discovery of the backdoor results in its malicious use by adversaries.";"";Medium;High;"::NATURE:ChildOf:CAPEC ID:444::";"";"::Access to the software during the development phase.::";"";"";"";"::SCOPE:AuthorizationTECHNICAL IMPACT:Execute Unauthorized Commands::";"::Assess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality.::";"";"";"";"";
511;"Infiltration of Software Development Environment";Detailed;Draft;"An attacker uses common delivery mechanisms such as email attachments or removable media to infiltrate the IDE (Integrated Development Environment) of a victim manufacturer with the intent of implanting malware allowing for attack control of the victim IDE environment. The attack then uses this access to exfiltrate sensitive data or information; manipulate said data or information; and conceal these actions. This will allow and aid the attack to meet the goal of future compromise of a recipient of the victim's manufactured product further down in the supply chain.";"";Low;High;"::NATURE:ChildOf:CAPEC ID:444::";"";"::The victim must use email or removable media from systems running the IDE (or systems adjacent to the IDE systems).::The victim must have a system running exploitable applications and/or a vulnerable configuration to allow for initial infiltration.::The attacker must have working knowledge of some if not all of the components involved in the IDE system as well as the infrastructure.::";"::SKILL:Intelligence about the manufacturer's operating environment and infrastructure.:LEVEL:Medium::SKILL:Ability to develop; deploy; and maintain a stealth malicious backdoor program remotely in what is essentially a hostile environment.:LEVEL:High::SKILL:Development skills to construct malicious attachments that can be used to exploit vulnerabilities in typical desktop applications or system configurations. The malicious attachments should be crafted well enough to bypass typical defensive systems (IDS; anti-virus; etc):LEVEL:High::";"";"";"";"";"::The attacker; knowing the victim runs email on a system adjacent to the IDE system; sends a phishing email with a malicious attachment to the victim. When viewed; the malicious attachment installs a backdoor that allows the attacker to remotely compromise the adjacent IDE system from the victim's workstation. The attacker is then able to exfiltrate sensitive data about the software being developed on the IDE system.::";"";"";"";
516;"Hardware Component Substitution During Baselining";Detailed;Draft;"An attacker with access to system components during allocated baseline development can substitute a maliciously altered hardware component for a baseline component in the during the product development and research phase. This can lead to adjustments and calibrations being made in the product; so that when the final product with the proper components is deployed; it will not perform as designed and be advantageous to the attacker.";"";Low;High;"::NATURE:ChildOf:CAPEC ID:444::";"";"::The attacker will need either physical access or be able to supply malicious hardware components to the product development facility.::";"::SKILL:Intelligence data on victim's purchasing habits.:LEVEL:Medium::SKILL:Resources to maliciously construct/alter hardware components used for testing by the supplier.:LEVEL:High::SKILL:Resources to physically infiltrate supplier.:LEVEL:High::";"";"";"";"";"::An attacker supplies the product development facility of a network security device with a hardware component that is used to simulate large volumes of network traffic. The device claims in logs; stats; and via the display panel to be pumping out very large quantities of network traffic; when it is in fact putting out very low volumes. The developed product is adjusted and configured to handle the what it believes to be a heavy network load; but when deployed at the victim site the large volumes of network traffic are dropped instead of being processed by the network security device. This allows the attacker an advantage when attacking the victim in that the attacker's presence may not be detected by the device.::";"";"";"";
520;"Counterfeit Hardware Component Inserted During Product Assembly";Detailed;Draft;"An attacker with either direct access to the product assembly process or to the supply of subcomponents used in the product assembly process introduces counterfeit hardware components into product assembly. The assembly containing the counterfeit components results in a system specifically designed for malicious purposes.";"";Low;High;"::NATURE:ChildOf:CAPEC ID:444::";"";"::The attacker will need either physical access or be able to supply malicious hardware components to the product development facility.::";"::SKILL:Resources to maliciously construct components used by the manufacturer.:LEVEL:High::SKILL:Resources to physically infiltrate manufacturer or manufacturer's supplier.:LEVEL:High::";"";"";"";"";"::A manufacturer of a firewall system requires a hardware card which functions as a multi-jack ethernet card with four ethernet ports. The attacker constructs a counterfeit card that functions normally except that packets from the attacker's network are allowed to bypass firewall processing completely. Once deployed at a victim location; this allows the attacker to bypass the firewall unrestricted.::";"";"";"";
532;"Altered Installed BIOS";Detailed;Stable;"An attacker with access to download and update system software sends a maliciously altered BIOS to the victim or victim supplier/integrator; which when installed allows for future exploitation.";"";Low;High;"::NATURE:ChildOf:CAPEC ID:444::";"";"::Advanced knowledge about the installed target system design.::Advanced knowledge about the download and update installation processes.::Access to the download and update system(s) used to deliver BIOS images.::";"::SKILL:Able to develop a malicious BIOS image with the original functionality as a normal BIOS image; but with added functionality that allows for later compromise and/or disruption.:LEVEL:High::";"";"";"";"";"::An attacker compromises the download and update portion of a manufacturer's web presence; and develops a malicious BIOS that in addition to the normal functionality will also at a specific time of day disable the remote access subsystem's security checks. The malicious BIOS is put in place on the manufacturer's website; the victim location is sent an official-looking email informing the victim of the availability of a new BIOS with bug fixes and enhanced performance capabilities to entice the victim to install the new BIOS quickly. The malicious BIOS is downloaded and installed on the victim's system; which allows for additional compromise by the attacker.::";"";"TAXONOMY NAME:ATTACK:ENTRY ID:1542.001:ENTRY NAME:Pre-OS Boot:System Firmware::";"";
537;"Infiltration of Hardware Development Environment";Detailed;Draft;"An attacker; leveraging the ability to manipulate components of primary support systems and tools within the development and production environments; inserts malicious software within the hardware and/or firmware development environment. The infiltration purpose is to alter developed hardware components in a system destined for deployment at the victim's organization; for the purpose of disruption or further compromise.";"";Low;High;"::NATURE:ChildOf:CAPEC ID:444::";"";"::The victim must use email or removable media from systems running the IDE (or systems adjacent to the IDE systems).::The victim must have a system running exploitable applications and/or a vulnerable configuration to allow for initial infiltration.::The attacker must have working knowledge of some if not all of the components involved in the IDE system as well as the infrastructure.::";"::SKILL:Intelligence about the manufacturer's operating environment and infrastructure.:LEVEL:Medium::SKILL:Ability to develop; deploy; and maintain a stealth malicious backdoor program remotely in what is essentially a hostile environment.:LEVEL:High::SKILL:Development skills to construct malicious attachments that can be used to exploit vulnerabilities in typical desktop applications or system configurations. The malicious attachments should be crafted well enough to bypass typical defensive systems (IDS; anti-virus; etc):LEVEL:High::";"";"";"";"";"::The attacker; knowing the manufacturer runs email on a system adjacent to the hardware development systems used for hardware and/or firmware design; sends a phishing email with a malicious attachment to the manufacturer. When viewed; the malicious attachment installs a backdoor that allows the attacker to remotely compromise the adjacent hardware development system from the manufacturer's workstation. The attacker is then able to exfiltrate and alter sensitive data on the hardware system; allowing for future compromise once the developed system is deployed at the victim location.::";"";"";"";
538;"Open Source Libraries Altered";Detailed;Stable;"An attacker with access to an open source code project (OSS) and knowledge of its particular use for in a system being developed; manufactured; or supported for the victim; can insert malicious code into the open source software used for math libraries in anticipation of inclusion into the system for the purpose of disruption or further compromise within the victim organization.";"";Low;High;"::NATURE:ChildOf:CAPEC ID:444::";"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine the relevent open-source code project to target] The adversary will make the selection based on various criteria: The open-source code currently in use on a selected target system. The depth in the dependency graph of the open source code in relationship to other code bases in use on the target system. Choosing an OSS lower in the graph decreases the probability of discovery; but also decreases the scope of its use within the target system. The programming language in which the open source code is implemented. Different languages present different opportunities for using known software weaknesses. The quality of processes in place to make a contribution. For instance; some contribution sites use static and dynamic analysis tools; which could increase the probability of discovery. The security requirments necessary to make a contribution. For instance; is the ownership lax allowing unsigned commits or anonymous users.::STEP:2:PHASE:Experiment:DESCRIPTION:[Develop a malicious contribution plan] The adversary develops a plan to contribute the malicious code; taking the following into consideration: The adversary will probably avoid easy-to-find software weaknesses; especially ones that static and dynamic analysis tools are likely to discover. Common coding errors or missing edge cases of the algorithm; which can be explained away as being accidental; if discovered; will be preferred by the adversary. Sometimes no identity is required to make a contribution. Other options are to steal an existing identity or create one. When creating a new identity strike a balance between too little or too much detail. Using an stolen identity could cause a notification to be sent to the actual user.::STEP:3:PHASE:Exploit:DESCRIPTION:[Execute the malicious contribution plan] Write the code to be contributed based on the plan and then submit the contribution. Multiple commits; possibly using multiple identities; will help obscure the attack. Monitor the contribution site to try to determine if the code has been uploaded to the target system.::";"::Access to the open source code base being used by the manufacturer in a system being developed or currently deployed at a victim location.::";"::SKILL:Advanced knowledge about the inclusion and specific usage of an open source code project within system being targeted for infiltration.:LEVEL:High::";"";"";"";"";"::An attacker with access to an open source code project introduces a hard-to-find bug in the software that allows under very specific conditions for encryption to be disabled on data streams. The attacker commits the change to the code which is picked up by a manufacturer who develops VPN software. It is eventually deployed at the victim's location where the very specific conditions are met; and the attacker is able to sniff plaintext traffic thought to be encrypted; allowing the attacker to gain access to sensitive data of the victim.::";"";"";"";
539;"ASIC With Malicious Functionality";Detailed;Draft;"An attacker with access to the development environment process of an application-specific integrated circuit (ASIC) for a victim system being developed or maintained after initial deployment can insert malicious functionality into the system for the purpose of disruption or further compromise.";"";Low;High;"::NATURE:ChildOf:CAPEC ID:444::";"";"::The attacker must have working knowledge of some if not all of the components involved in the target system as well as the infrastructure and development environment of the manufacturer.::Advanced knowledge about the ASIC installed within the target system.::";"::SKILL:Able to develop and manufacture malicious subroutines for an ASIC environment without degradation of existing functions and processes.:LEVEL:High::";"";"";"";"";"::A hardware manufacturer periodically updates its ASIC with new features. The attacker; knowing the manufacturer runs email on a system adjacent to the hardware development systems used for ASIC design; sends a phishing email with a malicious attachment to the manufacturer. When viewed; the malicious attachment installs a backdoor that allows the attacker to remotely compromise the adjacent ASIC development system. The attacker is then able to exfiltrate and alter sensitive data on the ASIC system; allowing for future compromise once a new AISC is deployed at the victim location.::";"";"";"";
517;"Documentation Alteration to Circumvent Dial-down";Detailed;Draft;"An attacker with access to a manufacturer's documentation; which include descriptions of advanced technology and/or specific components' criticality; alters the documents to circumvent dial-down functionality requirements. This alteration would change the interpretation of implementation and manufacturing techniques; allowing for advanced technologies to remain in place even though these technologies might be restricted to certain customers; such as nations on the terrorist watch list; giving the attacker on the receiving end of a shipped product access to an advanced technology that might otherwise be restricted.";"";Low;High;"::NATURE:ChildOf:CAPEC ID:447::";"";"::Advanced knowledge of internal software and hardware components within manufacturer's development environment.::Access to the manufacturer's documentation.::";"::SKILL:Ability to read; interpret; and subsequently alter manufacturer's documentation to prevent dial-down capabilities.:LEVEL:High::SKILL:Ability to stealthly gain access via remote compromise or physical access to the manufacturer's documentation.:LEVEL:High::";"";"";"";"";"::A product for manufacture exists that contains advanced cryptographic capabilities; including algorithms that are restricted from being shipped to some nations. An attacker from one of the restricted nations alters the documentation to ensure that when the product is manufactured for shipment to a restricted nation; the software compilation steps that normally would prevent the advanced cryptographic capabilities from being included are actually included. When the product is shipped to the attacker's home country; the attacker is able to retrieve and/or use the advanced cryptographic capabilities.::";"";"";"";
518;"Documentation Alteration to Produce Under-performing Systems";Detailed;Draft;"An attacker with access to a manufacturer's documentation alters the descriptions of system capabilities with the intent of causing errors in derived system requirements; impacting the overall effectiveness and capability of the system; allowing an attacker to take advantage of the introduced system capability flaw once the system is deployed.";"";Low;High;"::NATURE:ChildOf:CAPEC ID:447::";"";"::Advanced knowledge of software and hardware capabilities of a manufacturer's product.::Access to the manufacturer's documentation.::";"::SKILL:Ability to read; interpret; and subsequently alter manufacturer's documentation to misrepresent system capabilities.:LEVEL:High::SKILL:Ability to stealthly gain access via remote compromise or physical access to the manufacturer's documentation.:LEVEL:High::";"";"";"";"";"::A security subsystem involving encryption is a part of a product; but due to the demands of this subsystem during operation; the subsystem only runs when a specific amount of memory and processing is available. An attacker alters the descriptions of the system capabilities so that when deployed with the minimal requirements at the victim location; the encryption subsystem is never operational; leaving the system in a weakened security state.::";"";"";"";
519;"Documentation Alteration to Cause Errors in System Design";Detailed;Draft;"An attacker with access to a manufacturer's documentation containing requirements allocation and software design processes maliciously alters the documentation in order to cause errors in system design. This allows the attacker to take advantage of a weakness in a deployed system of the manufacturer for malicious purposes.";"";Low;High;"::NATURE:ChildOf:CAPEC ID:447::";"";"::Advanced knowledge of software capabilities of a manufacturer's product.::Access to the manufacturer's documentation.::";"::SKILL:Ability to read; interpret; and subsequently alter manufacturer's documentation to cause errors in system design.:LEVEL:High::SKILL:Ability to stealthly gain access via remote compromise or physical access to the manufacturer's documentation.:LEVEL:High::";"";"";"";"";"::During operation; a firewall will restart various subsystems to reload and implement new rules as added by the user. An attacker alters the software design dependencies in the manufacturer's documentation so that under certain predictable conditions the reload will fail to load in rules resulting in a fail open state. Once deployed at a victim site; this will allow the attacker to bypass the victim's firewall.::";"";"";"";
521;"Hardware Design Specifications Are Altered";Detailed;Draft;"An attacker with access to a manufacturer's hardware manufacturing process documentation alters the design specifications; which introduces flaws advantageous to the attacker once the system is deployed.";"";Low;High;"::NATURE:ChildOf:CAPEC ID:447::";"";"::Advanced knowledge of hardware capabilities of a manufacturer's product.::Access to the manufacturer's documentation.::";"::SKILL:Ability to read; interpret; and subsequently alter manufacturer's documentation to cause errors in design specifications.:LEVEL:High::SKILL:Ability to stealthly gain access via remote compromise or physical access to the manufacturer's documentation.:LEVEL:High::";"";"";"";"";"::To operate at full capability; a manufacturer's network intrusion detection device needs to have either a Intel Xeon E7-2820 or AMD FX-8350 which have 8 cores available; allowing for advanced threading needed to handle large volumes of network traffic without resorting to dropping packets from the detection process. The attacker alters the documentation to state that the system design must use the Intel Core Duo or the AMD Phenom II X2; which only have 2 cores; causing the system to drop large amounts of packets during deployment at a victim site with large amounts of network traffic.::";"";"";"";
522;"Malicious Hardware Component Replacement";Standard;Draft;"An attacker replaces legitimate hardware in the system with faulty counterfeit or tampered hardware in the supply chain distribution channel; with purpose of causing malicious disruption or allowing for additional compromise when the system is deployed.";"";Low;High;"::NATURE:ChildOf:CAPEC ID:439::";"";"::Physical access to the system after it has left the manufacturer but before it is deployed at the victim location.::";"::SKILL:Advanced knowledge of the design of the system.:LEVEL:High::SKILL:Hardware creation and manufacture of replacement components.:LEVEL:High::";"";"";"";"";"::During shipment the attacker is able to intercept a system that has been purchased by the victim; and replaces a math processor card that functions just like the original; but contains advanced malicious capability. Once deployed; the system functions as normal; but allows for the attacker to remotely communicate with the system and use it as a conduit for additional compromise within the victim's environment.::";"";"";"";
523;"Malicious Software Implanted";Standard;Draft;"An attacker implants malicious software into the system in the supply chain distribution channel; with purpose of causing malicious disruption or allowing for additional compromise when the system is deployed.";"";Low;High;"::NATURE:ChildOf:CAPEC ID:439::";"";"::Physical access to the system after it has left the manufacturer but before it is deployed at the victim location.::";"::SKILL:Advanced knowledge of the design of the system and it's operating system components and subcomponents.:LEVEL:High::SKILL:Malicious software creation.:LEVEL:High::";"";"";"";"";"::An attacker has created a piece of malicious software designed to function as a backdoor in a system that is to be deployed at the victim location. During shipment of the system; the attacker has physical access to the system at a loading dock of an integrator for a short time. The attacker unpacks and powers up the system and installs the malicious piece of software; and configures it to run upon system boot. The system is repackaged and returned to its place on the loading dock; and is shipped and installed at the victim location with the malicious software in place; allowing the attacker to bypass firewalls and remotely gain access to the victim's network for further malicious activities.::";"";"";"";
524;"Rogue Integration Procedures";Standard;Draft;"An attacker alters or establishes rogue processes in an integration facility in order to insert maliciously altered components into the system. The attacker would then supply the malicious components. This would allow for malicious disruption or additional compromise when the system is deployed.";"";Low;High;"::NATURE:ChildOf:CAPEC ID:439::";"";"::Physical access to an integration facility that prepares the system before it is deployed at the victim location.::";"::SKILL:Advanced knowledge of the design of the system.:LEVEL:High::SKILL:Hardware creation and manufacture of replacement components.:LEVEL:High::";"";"";"";"";"::An attacker gains access to a system integrator's documentation for the preparation of purchased systems designated for deployment at the victim's location. As a part of the preparation; the included 100 megabit network card is to be replaced with a 1 gigabit network card. The documentation is altered to reflect the type of 1 gigabit network card to use; and the attacker ensures that this type of network card is provided by the attacker's own supply. The card has additional malicious functionality which will allow for additional compromise by the attacker at the victim location once the system is deployed.::";"";"";"";
401;"Physically Hacking Hardware";Standard;Stable;"An adversary exploits a weakness in access control to gain access to currently installed hardware and precedes to implement changes or secretly replace a hardware component which undermines the system's integrity for the purpose of carrying out an attack.";"";Low;High;"::NATURE:ChildOf:CAPEC ID:440::";"";"";"";"";"";"";"";"::A malicious subcontractor or subcontractor's employee that is responsible for system maintenance secretly replaces a hard drive with one containing malicious code that will allow for backdoor access once deployed.::";"::1263::";"";"";
534;"Malicious Hardware Update";Standard;Stable;"An adversary introduces malicious hardware during an update or replacement procedure; allowing for additional compromise or site disruption at the victim location. After deployment; it is not uncommon for upgrades and replacements to occur involving hardware and various replaceable parts. These upgrades and replacements are intended to correct defects; provide additional features; and to replace broken or worn-out parts. However; by forcing or tricking the replacement of a good component with a defective or corrupted component; an adversary can leverage known defects to obtain a desired malicious impact.";"";Low;High;"::NATURE:ChildOf:CAPEC ID:440::";"";"";"::SKILL:Able to develop and manufacture malicious hardware components that perform the same functions and processes as their non-malicious counterparts.:LEVEL:High::";"";"";"";"";"::An adversary develops a malicious networking card that allows for normal function plus the addition of malicious functionality that is of benefit to the adversary. The adversary sends the victim an email stating that the existing networking card is faulty; and that the victim can order a replacement card free of charge. The victim orders the card; and the adversary sends the malicious networking card. The malicious networking card replaces the perfectly-functioning original networking card; and the adversary is able to take advantage of the additional malicious functionality to further compromise the victim's network.::";"";"";"";
402;"Bypassing ATA Password Security";Detailed;Draft;"An attacker exploits a weakness in ATA security on a drive to gain access to the information the drive contains without supplying the proper credentials. ATA Security is often employed to protect hard disk information from unauthorized access. The mechanism requires the user to type in a password before the BIOS is allowed access to drive contents. Some implementations of ATA security will accept the ATA command to update the password without the user having authenticated with the BIOS. This occurs because the security mechanism assumes the user has first authenticated via the BIOS prior to sending commands to the drive. Various methods exist for exploiting this flaw; the most common being installing the ATA protected drive into a system lacking ATA security features (a.k.a. hot swapping). Once the drive is installed into the new system the BIOS can be used to reset the drive password.";"";;;"::NATURE:ChildOf:CAPEC ID:401::";"";"::Access to the system containing the ATA Drive so that the drive can be physically removed from the system.::";"";"";"";"";"";"";"::285::";"";"";
531;"Hardware Component Substitution";Detailed;Draft;"An attacker substitutes out a tested and approved hardware component for a maliciously-altered hardware component. This type of attack is carried out directly on the system; enabling the attacker to then cause disruption or additional compromise.";"";Low;High;"::NATURE:ChildOf:CAPEC ID:534::";"";"::Physical access to the system or the integration facility where hardware components are kept.::";"::SKILL:Able to develop and manufacture malicious system components that perform the same functions and processes as their non-malicious counterparts.:LEVEL:High::";"";"";"";"";"::An attacker has access to an organization's warehouse of card readers being included as a part of an overall security system. By replacing a critical hardware component in the card reader; the attacker is able to alter the function of the card reader to allow an attacker-supplied card to bypass a security checkpoint. The card reader is placed in the warehouse; and later used in the victim's security system. The attacker is then able to go to the victim and use their own card and bypass a physical security checkpoint and gain access to the victim's location for further malicious activity.::";"";"";"";
442;"Infected Software";Standard;Stable;"An adversary adds malicious logic; often in the form of a computer virus; to otherwise benign software. This logic is often hidden from the user of the software and works behind the scenes to achieve negative impacts. Many times; the malicious logic is inserted into empty space between legitimate code; and is then called when the software is executed. This pattern of attack focuses on software already fielded and used in operation as opposed to software that is still under development and part of the supply chain.";"";Medium;High;"::NATURE:ChildOf:CAPEC ID:441::";"";"::Access to the software currently deployed at a victim location. This access is often obtained by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have.::";"";"";"";"::SCOPE:AuthorizationTECHNICAL IMPACT:Execute Unauthorized Commands::";"::Leverage anti-virus products to detect and quarantine software with known virus.::";"";"";"";"";
452;"Infected Hardware";Standard;Stable;"An adversary inserts malicious logic into hardware; typically in the form of a computer virus or rootkit. This logic is often hidden from the user of the hardware and works behind the scenes to achieve negative impacts. This pattern of attack focuses on hardware already fielded and used in operation as opposed to hardware that is still under development and part of the supply chain.";"";Medium;High;"::NATURE:ChildOf:CAPEC ID:441::";"";"::Access to the hardware currently deployed at a victim location.::";"";"";"";"::SCOPE:AuthorizationTECHNICAL IMPACT:Execute Unauthorized Commands::";"";"";"";"";"";
456;"Infected Memory";Standard;Stable;"An adversary inserts malicious logic into memory enabling them to achieve a negative impact. This logic is often hidden from the user of the system and works behind the scenes to achieve negative impacts. This pattern of attack focuses on systems already fielded and used in operation as opposed to systems that are still under development and part of the supply chain.";"";Medium;High;"::NATURE:ChildOf:CAPEC ID:441::";"";"";"";"";"";"::SCOPE:AuthorizationTECHNICAL IMPACT:Execute Unauthorized Commands::";"::Leverage anti-virus products to detect stop operations with known virus.::";"::A USB Memory stick has malicious logic inserted before shipping of the product allowing for infection of the host machine once inserted into the USB port.::In 2007; approximately 1800 of Seagate's Maxtor Personal Storage 3200 drives were built under contract with an outside manufacturer and contained a virus that stole user passwords.::";"";"";"";
448;"Embed Virus into DLL";Detailed;Stable;"An adversary tampers with a DLL and embeds a computer virus into gaps between legitimate machine instructions. These gaps may be the result of compiler optimizations that pad memory blocks for performance gains. The embedded virus then attempts to infect any machine which interfaces with the product; and possibly steal private data or eavesdrop.";"";Medium;High;"::NATURE:ChildOf:CAPEC ID:442::";"";"::Access to the software currently deployed at a victim location. This access is often obtained by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have.::";"";"";"";"::SCOPE:AuthorizationTECHNICAL IMPACT:Execute Unauthorized Commands::";"::Leverage anti-virus products to detect and quarantine software with known virus.::";"";"";"";"";
638;"Altered Component Firmware";Detailed;Stable;"An adversary with access to download and update system software sends a maliciously altered BIOS to the victim or victim supplier/integrator; which when installed allows for future exploitation.";"";Low;High;"::NATURE:ChildOf:CAPEC ID:452::";"";"::Advanced knowledge about the installed target system design.::Advanced knowledge about the download and update installation processes.::Access to the download and update system(s) used to deliver BIOS images.::";"::SKILL:Able to develop a malicious BIOS image with the original functionality as a normal BIOS image; but with added functionality that allows for later compromise and/or disruption.:LEVEL:High::";"";"";"";"";"::An attacker compromises the download and update portion of a manufacturer's web presence; and develops a malicious BIOS that in addition to the normal functionality will also at a specific time of day disable the remote access subsystem's security checks. The malicious BIOS is put in place on the manufacturer's website; the victim location is sent an official-looking email informing the victim of the availability of a new BIOS with bug fixes and enhanced performance capabilities to entice the victim to install the new BIOS quickly. The malicious BIOS is downloaded and installed on the victim's system; which allows for additional compromise by the attacker.::";"";"TAXONOMY NAME:ATTACK:ENTRY ID:1542.002:ENTRY NAME:Pre-OS Boot:Component Firmware::";"";
457;"USB Memory Attacks";Detailed;Draft;"An adversary loads malicious code onto a USB memory stick in order to infect any system which the device is plugged in to. USB drives present a significant security risk for business and government agencies. Given the ability to integrate wireless functionality into a USB stick; it is possible to design malware that not only steals confidential data; but sniffs the network; or monitor keystrokes; and then exfiltrates the stolen data off-site via a Wireless connection. Also; viruses can be transmitted via the USB interface without the specific use of a memory stick. The attacks from USB devices are often of such sophistication that experts conclude they are not the work of single individuals; but suggest state sponsorship. These attacks can be performed by an adversary with direct access to a target system or can be executed via means such as USB Drop Attacks.";"";Low;High;"::NATURE:ChildOf:CAPEC ID:456::NATURE:CanPrecede:CAPEC ID:529::";"::STEP:1:PHASE:Explore:DESCRIPTION:[Determine Target System] In certain cases; the adversary will explore an organization's network to determine a specific target machine to exploit based on the information it contains or privileges the main user may possess.TECHNIQUE:If needed; the adversary explores an organization's network to determine if any specific systems of interest exist.::STEP:2:PHASE:Experiment:DESCRIPTION:[Develop or Obtain malware and install on a USB device] The adversary develops or obtains the malicious software necessary to exploit the target system; which they then install on an external USB device such as a USB flash drive.TECHNIQUE:The adversary can develop or obtain malware for to perform a variety of tasks such as sniffing network traffic or monitoring keystrokes.::STEP:3:PHASE:Exploit:DESCRIPTION:[Connect or deceive a user into connecting the infected USB device] Once the malware has been placed on an external USB device; the adversary connects the device to the target system or deceives a user into connecting the device to the target system such as in a USB Drop Attack.TECHNIQUE:The adversary connects the USB device to a specified target system or performs a USB Drop Attack; hoping a user will find and connect the USB device on their own. Once the device is connected; the malware executes giving the adversary access to network traffic; credentials; etc.::";"::Some level of physical access to the device being attacked.::Information pertaining to the target organization on how to best execute a USB Drop Attack.::";"";"";"";"";"::Ensure that proper; physical system access is regulated to prevent an adversary from physically connecting a malicious USB device themself.::Use anti-virus and anti-malware tools which can prevent malware from executing if it finds its way onto a target system. Additionally; make sure these tools are regularly updated to contain up-to-date virus and malware signatures.::Do not connect untrusted USB devices to systems connected on an organizational network. Additionally; use an isolated testing machine to validate untrusted devices and confirm malware does not exist.::";"";"";"";"";
458;"Flash Memory Attacks";Detailed;Draft;"An attacker inserts malicious logic into a product or technology via flashing the on-board memory with a code-base that contains malicious logic. Various attacks exist against the integrity of flash memory; the most direct being rootkits coded into the BIOS or chipset of a device. Such attacks are very difficult to detect because the malicious code resides outside the filesystem or RAM; and in the underlying byte-code that drives the processor. Many devices; such as the recent attacks against digital picture frames; contain only a microprocessor and a small amount of solid-state memory; rendering these devices ideal for flash based malware or malicious logic. One of the pernicious characteristics of flash memory based attacks is that the malicious code can survive even a total format of the hard-drive and reinstallation of the host operating system. Virtually any device which can be integrated into a computer system is susceptible to these attacks. Additionally; any peripheral device which interfaces with the computer bus could extract or sniff confidential data; even on systems employing full-disk encryption. Trojan code placed into a video card's chipset would continue to perform its function irrespective of the host operating system; and would be invisible to all known antivirus. The threats extend to consumer products such as camcorders; digital cameras; or any consumer electronic device with an embedded microcontroller.";"";;;"::NATURE:ChildOf:CAPEC ID:456::";"";"";"";"";"";"";"";"";"";"";"";
529;"Malware-Directed Internal Reconnaissance";Standard;Stable;"Adversary uses malware or a similarly controlled application installed inside an organizational perimeter to gather information about the composition; configuration; and security mechanisms of a targeted application; system or network.";"";Medium;Medium;"::NATURE:ChildOf:CAPEC ID:169::";"";"::The adversary must have internal; logical access to the target network and system.::";"::SKILL:The adversary must be able to obtain or develop; as well as place malicious software inside the target network/system.:LEVEL:Medium::";"::The adversary requires a variety of tools to collect information about the target. These include port/network scanners and tools to analyze responses from applications to determine version and configuration information. Footprinting a system adequately may also take a few days if the attacker wishes the footprinting attempt to go undetected.::";"";"::SCOPE:ConfidentialityTECHNICAL IMPACT:Read Data::";"::Keep patches up to date by installing weekly or daily if possible.::Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.::";"";"";"";"";
